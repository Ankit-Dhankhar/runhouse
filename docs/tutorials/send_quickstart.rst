Compute Layer
====================================
[PLACEHOLDER]

This guide will walk you through:

- **Creating** a send
- **Running** a send
- **Sharing** a send
- **Interacting** with a send

.. note::
     Click :ref:`here <send>` for a more detailed guide on sends.

Creating a Send
------------------

Let's define our very first send, a simple function that takes two numbers and adds them.

Create a new file from anywhere on your machine with the below function included:

.. code-block:: python

    def add(a, b):
        return a + b


Now initialize your new send as follows:

.. code-block:: python

    import runhouse as rh
    my_send = rh.send(fn=add,
                      name='my_first_send',
                      hardware='^rh-cpu')

This defines a send with the following attributes:

- :code:`fn`: function we created above
- :code:`name`: name of the send
- :code:`hardware`: hardware specification (more on this :ref:`here <cluster>`)

Running a Send
------------------
Now that we have created our send, we can run it. The send itself is a python callable that
we can use to run our function with our desired inputs. The function itself will behave exactly as
we defined it, so all we need to do is provide it with valid inputs.


.. code-block:: python

    res = my_send(1, 2)


>>> print(res)


The above code will be executed on a remote cluster and the result will be returned to your local machine. ðŸ˜Ž

Sharing a Send
------------------
Now that we have a working send, we can share it. We provide various forms of access (more on that :ref:`here <send>`).
For this example, let's say you want to provide read-only access to your co-workers on your team.
You can do so as follows:

.. code-block:: python

    my_send.share(users=["username1", "user@gmail.com"], access_type='read')

- :code:`users`: list of user emails and/or Runhouse account usernames to share the send with
- :code:`access_type`: type of access to grant to the users


.. note::
    When sharing a resource all recipients will receive an email notification.
    You `can` share a send with users who do not yet have a Runhouse account (for those
    users an email must be provided).

Interacting with a Send
----------------------------
Runhouse provides convenient ways for interacting with your sends. Using the send we created above,
we can also call the following methods:

- :code:`my_send.api_docs()`: Opens an autogenerated doc site for the send.
- :code:`my_send.http_url()`: Generates a URL to share with others. This allows others to call your send from an HTTP endpoint without needing Write or Read access to it.
- :code:`my_send.keep_warm()`: Keep the send warm on the remote cluster, with option to include regions and min/max replicas.
- :code:`my_send.notebook()`: Opens a jupyter lab instance into your running send. Runhouse will tunnel a notebook from the remote cluster directly onto your local machine.
- :code:`my_send.ssh()`: SSH directly into your send on the remote cluster where it is running. You must have Write / Read access to the send in order to use this method.

.. tip::
    The send's cluster will spin down after a few minutes of inactivity, but Runhouse will boot them back
    up if another call is made. You can explicitly spin down by simply deleting the send handle (e.g. :code:`del my_send`).
    To prevent the cluster from spinning down, you can use the :code:`keep_warm` method.
